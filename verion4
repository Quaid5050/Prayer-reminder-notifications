import React, { useState, useEffect } from 'react';
import { View, Text, Button, Alert } from 'react-native';
import * as Location from 'expo-location';
import { scheduleNotificationAsync, getAllScheduledNotificationsAsync, cancelAllScheduledNotificationsAsync } from 'expo-notifications';

const PrayerTimesScreen = () => {
  const [prayerTimes, setPrayerTimes] = useState(null);

  useEffect(() => {
    fetchPrayerTimes();
    fetchScheduledNotifications();
  }, []);

  const fetchPrayerTimes = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        throw new Error('Location permission not granted');
      }

      const location = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = location.coords;

      const currentDate = new Date();
      const day = String(currentDate.getDate()).padStart(2, '0');
      const month = String(currentDate.getMonth() + 1).padStart(2, '0');
      const year = String(currentDate.getFullYear());

      const formattedDate = `${day}-${month}-${year}`;

      const method = 2;

      const url = `http://api.aladhan.com/v1/timings/${formattedDate}?latitude=${latitude}&longitude=${longitude}&method=${method}`;

      const response = await fetch(url);
      const data = await response.json();
      const timings = data.data.timings;
      setPrayerTimes(timings);
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const scheduleNotification = async (prayerName, prayerTime) => {
    const date = new Date();
    const prayerTimeParts = prayerTime.split(':');
    date.setHours(Number(prayerTimeParts[0]), Number(prayerTimeParts[1]), 0);

    await scheduleNotificationAsync({
      content: {
        title: prayerName,
        body: `It's time for ${prayerName} prayer`,
      },
      trigger: {
        date,
      },
    });
  };

  const fetchScheduledNotifications = async () => {
    try {
      const data = await getAllScheduledNotificationsAsync();
      console.log("Scheduled Notifications:", data);
    } catch (error) {
      console.error("Error fetching scheduled notifications:", error);
    }
  };

  const cancelAllNotifications = async () => {
    try {
      await cancelAllScheduledNotificationsAsync();
      console.log("All notifications canceled");
    } catch (error) {
      console.error("Error canceling notifications:", error);
    }
  };

  const handleCallNotification = () => {
    fetchPrayerTimes();
  };

  const handleScheduleAllNotifications = () => {
    // if (prayerTimes) {
    //   Object.entries(prayerTimes).forEach(([prayerName, time]) => {
    //     scheduleNotification(prayerName, time);
    //   });
    // }
    // Schedule notifications for specific prayer times
    cancelAllNotifications();
    scheduleNotification('Fajr', prayerTimes.Fajr);
    scheduleNotification('Dhuhr', prayerTimes.Dhuhr);
    scheduleNotification('Asr', prayerTimes.Asr);
    scheduleNotification('Maghrib', prayerTimes.Maghrib);
    scheduleNotification('Isha', prayerTimes.Isha);

  };

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      {prayerTimes ? (
        Object.entries(prayerTimes).map(([prayerName, time]) => (
          <Text key={prayerName}>
            {prayerName}: {time}
          </Text>
        ))
      ) : (
        <Text>No prayer times available</Text>
      )}
      <Button title="Call Notification" onPress={handleCallNotification} />
      <Button title="Schedule All Notifications" onPress={handleScheduleAllNotifications} />
      <Button title="Cancel All Notifications" onPress={cancelAllNotifications} />
    </View>
  );
};

export default PrayerTimesScreen;
